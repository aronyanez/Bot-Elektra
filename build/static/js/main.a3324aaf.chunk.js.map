{"version":3,"sources":["components/Header.js","components/ChatBot.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","state","e","preventDefault","window","close","Fragment","className","onClick","this","handleClick","href","React","Component","ChatBot","token","conversationId","styleOptions","bubbleBackground","bubbleFromUserBackground","bubbleFromUserTextColor","bubbleTextColor","bubbleBorderColor","bubbleBorderRadius","bubbleFromUserBorderRadius","bubbleBorderStyle","bubbleBorderWidth","subtle","avatarSize","botAvatarImage","botAvatarBackgroundColor","userAvatarImage","userAvatarBackgroundColor","backgroundColor","paddingRegular","fontSizeSmall","hideUploadButton","microphoneButtonColorOnDictate","sendBoxBackground","sendBoxButtonColor","sendBoxButtonColorOnDisabled","sendBoxButtonColorOnFocus","sendBoxButtonColorOnHover","sendBoxDisabledTextColor","undefined","sendBoxHeight","sendBoxMaxHeight","sendBoxTextColor","sendBoxBorderBottom","sendBoxBorderLeft","sendBoxBorderRight","sendBoxBorderTop","console","log","process","fetch","method","headers","Headers","res","json","resJson","setState","botConnection","postActivity","from","id","value","type","name","subscribe","fetchToken","createDirectLine","directLine","App","Boolean","location","hostname","match","setDocHeight","document","documentElement","style","setProperty","innerHeight","ReactDOM","render","StrictMode","getElementById","addEventListener","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ubAqCeA,G,0DAjCX,WAAYC,GAAQ,IAAD,8BAGf,cAAMA,IACDC,MAAQ,GAJE,E,wDAQPC,GACRA,EAAEC,iBAEFC,OAAOC,U,+BAGP,OACI,kBAAC,IAAMC,SAAP,KACI,gCACI,yBAAKC,UAAU,QAAf,eAEA,6BACI,yBAAKC,QAASC,KAAKC,aACf,uBAAGC,KAAK,KAAR,0B,GAtBPC,IAAMC,YCiGZC,E,kDA7FX,WAAYd,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTc,MAAO,KACPC,eAAgB,KAChBC,aAAc,CACVC,iBAAkB,UAClBC,yBAA0B,QAC1BC,wBAAyB,QACzBC,gBAAiB,QACjBC,kBAAmB,QACnBC,mBAAoB,qBACpBC,2BAA4B,qBAC5BC,kBAAmB,QACnBC,kBAAmB,EACnBC,OAAQ,OAIRC,WAAY,GACZC,eAAgB,uCAChBC,yBAA0B,UAC1BC,gBAAiB,sCACjBC,0BAA2B,QAC3BC,gBAAiB,UACjBC,eAAgB,GAEhBC,cAAe,OAIfC,kBAAkB,EAClBC,+BAAgC,OAChCC,kBAAmB,QACnBC,mBAAoB,MACpBC,6BAA8B,OAC9BC,0BAA2B,OAC3BC,0BAA2B,OAC3BC,8BAA0BC,EAC1BC,cAAe,GACfC,iBAAkB,IAClBC,iBAAkB,QAClBC,oBAAqB,mBACrBC,kBAAmB,mBACnBC,mBAAoB,mBACpBC,iBAAkB,qBA7CX,E,kLAoDfC,QAAQC,IAAI,8BAA+BC,4O,SAEzBC,MAAM,qEACpB,CACIC,OAAQ,OAAQC,QAAS,IAAIC,QAAQ,CACjC,cAAiB,kEACjB,eAAgB,wC,cAJtBC,E,gBAOgBA,EAAIC,O,OAApBC,E,OACNpD,KAAKqD,SAAS,CACV/C,MAAO8C,EAAQ9C,MACfC,eAAgB6C,EAAQ7C,iB,yIAInB+C,GAETA,EAAcC,aAAa,CACvBC,KAAM,CAAEC,GAAI,UACZC,MAAO,OAAS1D,KAAKO,eAAiB,UACtCoD,KAAM,QACNC,KAAM,uBAELC,WAAU,SAAAJ,GAAE,OAAId,QAAQC,IAAI,SAAWa,Q,0CAG5CzD,KAAK8D,e,+BAML,IAAMR,EAAgBS,2BAAiB,CAAEzD,MAAON,KAAKR,MAAMc,QAC3D,MAAO,CACH,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAc0D,WAAYV,EAAe9C,aAAcR,KAAKR,MAAMgB,oB,GAzFxDL,IAAMC,WCIb6D,MANf,WACE,OACE,kBAAC,EAAD,CAASnE,UAAU,SCMHoE,QACW,cAA7BvE,OAAOwE,SAASC,UAEe,UAA7BzE,OAAOwE,SAASC,UAEhBzE,OAAOwE,SAASC,SAASC,MACvB,2DCLN,SAASC,IACPC,SAASC,gBAAgBC,MAAMC,YAAY,OAA3C,UAAsD/E,OAAOgF,YAAc,IAA3E,OARFC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFP,SAASQ,eAAe,SAM1BT,IACA3E,OAAOqF,iBAAiB,SAAUV,GAClC3E,OAAOqF,iBAAiB,oBAAqBV,GDiHvC,kBAAmBW,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,a","file":"static/js/main.a3324aaf.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport './Header.css';\r\nclass Header extends React.Component {\r\n    constructor(props) {\r\n\r\n\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    handleClick(e) {\r\n        e.preventDefault();\r\n        \r\n        window.close();\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <header>\r\n                    <div className=\"logo\">Elektra Bot</div>\r\n\r\n                    <nav>\r\n                        <div onClick={this.handleClick}>\r\n                            <a href=\"#\">\r\n\r\n                                Finalizar Chat\r\n                            </a>\r\n                        </div>\r\n                    </nav>\r\n                </header>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n}\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nimport ReactWebChat, { createDirectLine } from 'botframework-webchat';\r\n\r\nimport Header from './Header';\r\n\r\nclass ChatBot extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            token: null,\r\n            conversationId: null,\r\n            styleOptions: {\r\n                bubbleBackground: '#ffdc20',\r\n                bubbleFromUserBackground: 'Black',\r\n                bubbleFromUserTextColor: 'White',\r\n                bubbleTextColor: 'Black',\r\n                bubbleBorderColor: 'black',\r\n                bubbleBorderRadius: '0px 10px 10px 10px',\r\n                bubbleFromUserBorderRadius: '10px 0px 10px 10px',\r\n                bubbleBorderStyle: 'solid',\r\n                bubbleBorderWidth: 1,\r\n                subtle: 'grey',\r\n\r\n                // botAvatarImage: process.env.REACT_APP_PUBLIC_URL + '/elektra.png',\r\n                //Avatar\r\n                avatarSize: 50,\r\n                botAvatarImage: 'https://i.ibb.co/02q2KH3/elektra.png',\r\n                botAvatarBackgroundColor: '#ffdc20',\r\n                userAvatarImage: 'https://i.ibb.co/KNfM1Dp/social.png',\r\n                userAvatarBackgroundColor: 'white',\r\n                backgroundColor: '#ffee96',\r\n                paddingRegular: 20,\r\n                //fonts\r\n                fontSizeSmall: '100%',\r\n\r\n\r\n                //text input\r\n                hideUploadButton: true,\r\n                microphoneButtonColorOnDictate: '#F33',\r\n                sendBoxBackground: 'White',\r\n                sendBoxButtonColor: 'red', // defaults to subtle\r\n                sendBoxButtonColorOnDisabled: 'gray',\r\n                sendBoxButtonColorOnFocus: '#333',\r\n                sendBoxButtonColorOnHover: '#333',\r\n                sendBoxDisabledTextColor: undefined, // defaults to subtle\r\n                sendBoxHeight: 40,\r\n                sendBoxMaxHeight: 200,\r\n                sendBoxTextColor: 'Black',\r\n                sendBoxBorderBottom: 'solid 30px black',\r\n                sendBoxBorderLeft: 'solid 30px black',\r\n                sendBoxBorderRight: 'solid 30px black',\r\n                sendBoxBorderTop: 'solid 30px black',\r\n            }\r\n        };\r\n    }\r\n\r\n\r\n    async fetchToken() {\r\n        console.log('process.env.PUBLIC_URL :>> ', process.env);\r\n\r\n        const res = await fetch(\"https://directline.botframework.com/v3/directline/tokens/generate/\",\r\n            {\r\n                method: 'POST', headers: new Headers({\r\n                    'Authorization': 'Bearer  ' + process.env.REACT_APP_SECRET,\r\n                    'Content-Type': 'application/x-www-form-urlencoded'\r\n                }),\r\n            });\r\n        const resJson = await res.json();\r\n        this.setState({\r\n            token: resJson.token,\r\n            conversationId: resJson.conversationId\r\n        });\r\n    }\r\n\r\n    closeBotChat(botConnection) {\r\n\r\n        botConnection.postActivity({\r\n            from: { id: '<user>' },\r\n            value: \"chat\" + this.conversationId + \" closed\", //send whatever information you need about the conversation here\r\n            type: 'event',\r\n            name: \"ConversationUpdate\"\r\n        })\r\n            .subscribe(id => console.log(\"closed\" + id)) // this will likely not be shown unless the botchat is in a modal within the page somewhere\r\n    }\r\n    componentDidMount() {\r\n        this.fetchToken();\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const botConnection = createDirectLine({ token: this.state.token });\r\n        return [\r\n            <Header />,\r\n            <ReactWebChat directLine={botConnection} styleOptions={this.state.styleOptions} />\r\n        ]\r\n    }\r\n\r\n}\r\nexport default ChatBot;\r\n\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\n\nimport ChatBot from './components/ChatBot'\nfunction App() {\n  return (\n    <ChatBot className=\"App\" />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nfunction setDocHeight() {\n  document.documentElement.style.setProperty('--vh', `${window.innerHeight / 100}px`);\n};\nsetDocHeight();\nwindow.addEventListener('resize', setDocHeight)\nwindow.addEventListener('orientationchange', setDocHeight)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}